# -*- coding: utf-8 -*-
"""Coin Detection and segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E15ghI8W1d1WflMjTWInoayhLOc21vRU

Part 1: Use computer vision techniques to Detect, segment, and count coins from an
image containing scattered Indian coins.
___________________________________________________________________________
**a. Detect all coins in the image (2 Marks)** \
 Use edge detection, to detect all coins in the image.\
 Visualize the detected coins by outlining them in the image. \
\
b. Segmentation of Each Coin (3 Marks)\
 Apply region-based segmentation techniques to isolate individual coins from the
image.\
 Provide segmented outputs for each detected coin.\
\
c. Count the Total Number of Coins (2 Marks)\
 Write a function to count the total number of coins detected in the image.\
 Display the final count as an output.

coinss.31.33 AM.png
"""

import cv2 #image processing library
import numpy as np
import matplotlib.pyplot as plt

def detect_and_count_coins(image_path):
    """
    Improved coin detection using Hough Circles for overlapping coins.
    """
    # Read the image
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError("Could not read the image")

    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply preprocessing
    blurred = cv2.GaussianBlur(gray, (9, 9), 2)

    # Detect circles using Hough Circle Transform
    circles = cv2.HoughCircles(
        blurred,
        cv2.HOUGH_GRADIENT,
        dp=1,
        minDist=50,  # Minimum distance between centers
        param1=50,   # Upper threshold for edge detection
        param2=30,   # Threshold for center detection
        minRadius=30,  # Minimum radius to detect
        maxRadius=75   # Maximum radius to detect
    )

    # Create visualizations
    edge_vis = image.copy()
    segmentation_mask = np.zeros_like(gray)
    individual_coins = []

    if circles is not None:
        circles = np.uint16(np.around(circles))

        for i in circles[0, :]:
            # Draw the outer circle on detection visualization
            cv2.circle(edge_vis, (i[0], i[1]), i[2], (0, 255, 0), 2)

            # Draw filled circle on mask
            cv2.circle(segmentation_mask, (i[0], i[1]), i[2], (255), -1)

            # Extract individual coin
            mask = np.zeros_like(gray)
            cv2.circle(mask, (i[0], i[1]), i[2], (255), -1)
            coin = cv2.bitwise_and(image, image, mask=mask)

            # Get bounding rectangle
            x = max(0, i[0] - i[2])
            y = max(0, i[1] - i[2])
            w = min(image.shape[1] - x, 2 * i[2])
            h = min(image.shape[0] - y, 2 * i[2])

            coin_cropped = coin[int(y):int(y+h), int(x):int(x+w)]
            if coin_cropped.size > 0:
                individual_coins.append(coin_cropped)

    # Create segmented visualization
    segmented_vis = image.copy()
    segmented_vis[segmentation_mask == 0] = [0, 0, 0]

    coin_count = len(individual_coins)
    return image, edge_vis, segmented_vis, individual_coins, coin_count

def visualize_results(original, edges, segmented, individual_coins, count):
    """
    Visualize the results with improved layout
    """
    plt.figure(figsize=(15, 10))

    # Original image
    plt.subplot(231)
    plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
    plt.title('Original Image')
    plt.axis('off')

    # Edge detection result
    plt.subplot(232)
    plt.imshow(cv2.cvtColor(edges, cv2.COLOR_BGR2RGB))
    plt.title(f'Coin Detection (Count: {count})')
    plt.axis('off')

    # Segmentation result
    plt.subplot(233)
    plt.imshow(cv2.cvtColor(segmented, cv2.COLOR_BGR2RGB))
    plt.title('Segmented Coins')
    plt.axis('off')

    # Display individual coins
    for i, coin in enumerate(individual_coins[:3]):
        plt.subplot(234 + i)
        plt.imshow(cv2.cvtColor(coin, cv2.COLOR_BGR2RGB))
        plt.title(f'Coin {i+1}')
        plt.axis('off')

    plt.tight_layout()
    plt.show()

# Example usage
if __name__ == "__main__":
    image_path = "coinss.31.33 AM.png"  # Replace with your image path

    try:
        original, edges, segmented, individual_coins, count = detect_and_count_coins(image_path)
        visualize_results(original, edges, segmented, individual_coins, count)
        print(f"\nTotal number of coins detected: {count}")
    except Exception as e:
        print(f"Error processing image: {str(e)}")