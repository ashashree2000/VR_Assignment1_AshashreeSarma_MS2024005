# -*- coding: utf-8 -*-
"""panoroma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kegrzlPjuVXfVc5vJZEosJRDvxNrZUVw

Part 2: Create a stitched panorama from multiple overlapping images.
___________________________________________________________________
a. Extract Key Points (1 Mark) \
 Detect key points in overlapping images. \
\
b. Image Stitching (2 Marks)\
 Use the extracted key points to align and stitch the images into a single panorama.\
 Provide the final panorama image as output.\
Dataset: Capture your own set of overlapping images using a smartphone.
"""

import cv2
import numpy as np
import os
from pathlib import Path
import matplotlib.pyplot as plt

def load_images():
    """
    Load images from the current working directory
    """
    # List of image names
    image_names = ['a.jpeg', 'b.jpeg', 'c.jpeg', 'd.jpeg']
    images = []

    print("Loading images...")
    for img_name in image_names:
        try:
            img = cv2.imread(img_name)
            if img is not None:
                # Convert BGR to RGB for proper display
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                images.append(img)
                print(f"Successfully loaded {img_name}")
            else:
                print(f"Failed to load {img_name}")
        except Exception as e:
            print(f"Error loading {img_name}: {str(e)}")

    return images

def stitch_images(images):
    """
    Stitch multiple images into a panorama
    """
    # Convert RGB back to BGR for OpenCV processing
    bgr_images = [cv2.cvtColor(img, cv2.COLOR_RGB2BGR) for img in images]

    # Initialize the OpenCV stitcher
    stitcher = cv2.Stitcher_create()

    # Perform stitching
    status, panorama = stitcher.stitch(bgr_images)

    if status == cv2.Stitcher_OK:
        # Convert BGR back to RGB for display
        return cv2.cvtColor(panorama, cv2.COLOR_BGR2RGB)
    else:
        print("Stitching failed! Status code:", status)
        return None

def detect_and_draw_keypoints(image):
    """
    Detect and draw keypoints on an image using SIFT
    """
    # Convert RGB to BGR for OpenCV processing
    bgr_image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    # Convert to grayscale
    gray = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2GRAY)

    # Initialize SIFT detector
    sift = cv2.SIFT_create()

    # Detect keypoints
    keypoints = sift.detect(gray, None)

    # Draw keypoints
    image_with_keypoints = cv2.drawKeypoints(bgr_image, keypoints, None,
                                           flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

    # Convert BGR back to RGB for display
    image_with_keypoints = cv2.cvtColor(image_with_keypoints, cv2.COLOR_BGR2RGB)

    return image_with_keypoints, keypoints

def display_images(images, titles, rows, cols, figsize=(15, 10)):
    """
    Display multiple images in a grid
    """
    fig, axes = plt.subplots(rows, cols, figsize=figsize)
    axes = axes.ravel() if isinstance(axes, np.ndarray) else [axes]

    for idx, (image, title) in enumerate(zip(images, titles)):
        axes[idx].imshow(image)
        axes[idx].set_title(title)
        axes[idx].axis('off')

    plt.tight_layout()
    plt.show()

def main():
    # Load images
    images = load_images()

    if not images:
        print("No images were loaded successfully!")
        return

    print(f"\nSuccessfully loaded {len(images)} images")

    # Display original images
    display_images(images,
                  [f"Original Image {i+1}" for i in range(len(images))],
                  rows=2, cols=2)

    # Part a: Extract and visualize keypoints
    print("\nPart a: Detecting keypoints...")
    keypoint_images = []
    for i, image in enumerate(images):
        image_with_keypoints, keypoints = detect_and_draw_keypoints(image)
        print(f"Found {len(keypoints)} keypoints in image {i+1}")
        keypoint_images.append(image_with_keypoints)

    # Display keypoint images
    display_images(keypoint_images,
                  [f"Keypoints Image {i+1}" for i in range(len(keypoint_images))],
                  rows=2, cols=2)

    # Part b: Stitch images
    print("\nPart b: Stitching images...")
    panorama = stitch_images(images)

    if panorama is not None:
        # Display the final panorama
        plt.figure(figsize=(20, 10))
        plt.imshow(panorama)
        plt.title("Final Panorama")
        plt.axis('off')
        plt.show()
        print("Panorama created successfully!")
    else:
        print("Failed to create panorama!")

if __name__ == "__main__":
    main()